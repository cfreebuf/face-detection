// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: facenet.proto

#include "facenet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace facenet_server {
class EmbeddingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmbeddingRequest> _instance;
} _EmbeddingRequest_default_instance_;
class EmbeddingReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmbeddingReply> _instance;
} _EmbeddingReply_default_instance_;
}  // namespace facenet_server
static void InitDefaultsEmbeddingRequest_facenet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::facenet_server::_EmbeddingRequest_default_instance_;
    new (ptr) ::facenet_server::EmbeddingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::facenet_server::EmbeddingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EmbeddingRequest_facenet_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmbeddingRequest_facenet_2eproto}, {}};

static void InitDefaultsEmbeddingReply_facenet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::facenet_server::_EmbeddingReply_default_instance_;
    new (ptr) ::facenet_server::EmbeddingReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::facenet_server::EmbeddingReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EmbeddingReply_facenet_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmbeddingReply_facenet_2eproto}, {}};

void InitDefaults_facenet_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EmbeddingRequest_facenet_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EmbeddingReply_facenet_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_facenet_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_facenet_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_facenet_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_facenet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::facenet_server::EmbeddingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::facenet_server::EmbeddingRequest, image_base64_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::facenet_server::EmbeddingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::facenet_server::EmbeddingReply, error_),
  PROTOBUF_FIELD_OFFSET(::facenet_server::EmbeddingReply, dim_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::facenet_server::EmbeddingRequest)},
  { 6, -1, sizeof(::facenet_server::EmbeddingReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::facenet_server::_EmbeddingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::facenet_server::_EmbeddingReply_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_facenet_2eproto = {
  {}, AddDescriptors_facenet_2eproto, "facenet.proto", schemas,
  file_default_instances, TableStruct_facenet_2eproto::offsets,
  file_level_metadata_facenet_2eproto, 2, file_level_enum_descriptors_facenet_2eproto, file_level_service_descriptors_facenet_2eproto,
};

const char descriptor_table_protodef_facenet_2eproto[] =
  "\n\rfacenet.proto\022\016facenet_server\"(\n\020Embed"
  "dingRequest\022\024\n\014image_base64\030\001 \001(\t\",\n\016Emb"
  "eddingReply\022\r\n\005error\030\001 \001(\005\022\013\n\003dim\030\002 \003(\0012"
  "b\n\007FaceNet\022W\n\021GenerateEmbedding\022 .facene"
  "t_server.EmbeddingRequest\032\036.facenet_serv"
  "er.EmbeddingReply\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_facenet_2eproto = {
  false, InitDefaults_facenet_2eproto, 
  descriptor_table_protodef_facenet_2eproto,
  "facenet.proto", &assign_descriptors_table_facenet_2eproto, 227,
};

void AddDescriptors_facenet_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_facenet_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_facenet_2eproto = []() { AddDescriptors_facenet_2eproto(); return true; }();
namespace facenet_server {

// ===================================================================

void EmbeddingRequest::InitAsDefaultInstance() {
}
class EmbeddingRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbeddingRequest::kImageBase64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbeddingRequest::EmbeddingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:facenet_server.EmbeddingRequest)
}
EmbeddingRequest::EmbeddingRequest(const EmbeddingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_base64_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_base64().size() > 0) {
    image_base64_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_base64_);
  }
  // @@protoc_insertion_point(copy_constructor:facenet_server.EmbeddingRequest)
}

void EmbeddingRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EmbeddingRequest_facenet_2eproto.base);
  image_base64_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EmbeddingRequest::~EmbeddingRequest() {
  // @@protoc_insertion_point(destructor:facenet_server.EmbeddingRequest)
  SharedDtor();
}

void EmbeddingRequest::SharedDtor() {
  image_base64_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmbeddingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmbeddingRequest& EmbeddingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EmbeddingRequest_facenet_2eproto.base);
  return *internal_default_instance();
}


void EmbeddingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:facenet_server.EmbeddingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_base64_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmbeddingRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EmbeddingRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string image_base64 = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("facenet_server.EmbeddingRequest.image_base64");
        object = msg->mutable_image_base64();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmbeddingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:facenet_server.EmbeddingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string image_base64 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_base64()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_base64().data(), static_cast<int>(this->image_base64().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "facenet_server.EmbeddingRequest.image_base64"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:facenet_server.EmbeddingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:facenet_server.EmbeddingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmbeddingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:facenet_server.EmbeddingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_base64 = 1;
  if (this->image_base64().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_base64().data(), static_cast<int>(this->image_base64().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "facenet_server.EmbeddingRequest.image_base64");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image_base64(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:facenet_server.EmbeddingRequest)
}

::google::protobuf::uint8* EmbeddingRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:facenet_server.EmbeddingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_base64 = 1;
  if (this->image_base64().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_base64().data(), static_cast<int>(this->image_base64().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "facenet_server.EmbeddingRequest.image_base64");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image_base64(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:facenet_server.EmbeddingRequest)
  return target;
}

size_t EmbeddingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:facenet_server.EmbeddingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_base64 = 1;
  if (this->image_base64().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_base64());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmbeddingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:facenet_server.EmbeddingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbeddingRequest* source =
      ::google::protobuf::DynamicCastToGenerated<EmbeddingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:facenet_server.EmbeddingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:facenet_server.EmbeddingRequest)
    MergeFrom(*source);
  }
}

void EmbeddingRequest::MergeFrom(const EmbeddingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:facenet_server.EmbeddingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_base64().size() > 0) {

    image_base64_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_base64_);
  }
}

void EmbeddingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:facenet_server.EmbeddingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbeddingRequest::CopyFrom(const EmbeddingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:facenet_server.EmbeddingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbeddingRequest::IsInitialized() const {
  return true;
}

void EmbeddingRequest::Swap(EmbeddingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmbeddingRequest::InternalSwap(EmbeddingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_base64_.Swap(&other->image_base64_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata EmbeddingRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_facenet_2eproto);
  return ::file_level_metadata_facenet_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EmbeddingReply::InitAsDefaultInstance() {
}
class EmbeddingReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmbeddingReply::kErrorFieldNumber;
const int EmbeddingReply::kDimFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmbeddingReply::EmbeddingReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:facenet_server.EmbeddingReply)
}
EmbeddingReply::EmbeddingReply(const EmbeddingReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:facenet_server.EmbeddingReply)
}

void EmbeddingReply::SharedCtor() {
  error_ = 0;
}

EmbeddingReply::~EmbeddingReply() {
  // @@protoc_insertion_point(destructor:facenet_server.EmbeddingReply)
  SharedDtor();
}

void EmbeddingReply::SharedDtor() {
}

void EmbeddingReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmbeddingReply& EmbeddingReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EmbeddingReply_facenet_2eproto.base);
  return *internal_default_instance();
}


void EmbeddingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:facenet_server.EmbeddingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  error_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmbeddingReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EmbeddingReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated double dim = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedDoubleParser;
          object = msg->mutable_dim();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        do {
          msg->add_dim(::google::protobuf::io::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmbeddingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:facenet_server.EmbeddingReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double dim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_dim())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:facenet_server.EmbeddingReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:facenet_server.EmbeddingReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmbeddingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:facenet_server.EmbeddingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated double dim = 2;
  if (this->dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dim_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->dim().data(), this->dim_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:facenet_server.EmbeddingReply)
}

::google::protobuf::uint8* EmbeddingReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:facenet_server.EmbeddingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated double dim = 2;
  if (this->dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _dim_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->dim_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:facenet_server.EmbeddingReply)
  return target;
}

size_t EmbeddingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:facenet_server.EmbeddingReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double dim = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dim_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmbeddingReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:facenet_server.EmbeddingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EmbeddingReply* source =
      ::google::protobuf::DynamicCastToGenerated<EmbeddingReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:facenet_server.EmbeddingReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:facenet_server.EmbeddingReply)
    MergeFrom(*source);
  }
}

void EmbeddingReply::MergeFrom(const EmbeddingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:facenet_server.EmbeddingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void EmbeddingReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:facenet_server.EmbeddingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmbeddingReply::CopyFrom(const EmbeddingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:facenet_server.EmbeddingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmbeddingReply::IsInitialized() const {
  return true;
}

void EmbeddingReply::Swap(EmbeddingReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmbeddingReply::InternalSwap(EmbeddingReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
  swap(error_, other->error_);
}

::google::protobuf::Metadata EmbeddingReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_facenet_2eproto);
  return ::file_level_metadata_facenet_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace facenet_server
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::facenet_server::EmbeddingRequest* Arena::CreateMaybeMessage< ::facenet_server::EmbeddingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::facenet_server::EmbeddingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::facenet_server::EmbeddingReply* Arena::CreateMaybeMessage< ::facenet_server::EmbeddingReply >(Arena* arena) {
  return Arena::CreateInternal< ::facenet_server::EmbeddingReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
