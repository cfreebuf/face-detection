// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: facenet.proto

#include "facenet.pb.h"
#include "facenet.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace facenet_server {

static const char* FaceNet_method_names[] = {
  "/facenet_server.FaceNet/GenerateEmbedding",
};

std::unique_ptr< FaceNet::Stub> FaceNet::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FaceNet::Stub> stub(new FaceNet::Stub(channel));
  return stub;
}

FaceNet::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GenerateEmbedding_(FaceNet_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FaceNet::Stub::GenerateEmbedding(::grpc::ClientContext* context, const ::facenet_server::EmbeddingRequest& request, ::facenet_server::EmbeddingReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GenerateEmbedding_, context, request, response);
}

void FaceNet::Stub::experimental_async::GenerateEmbedding(::grpc::ClientContext* context, const ::facenet_server::EmbeddingRequest* request, ::facenet_server::EmbeddingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateEmbedding_, context, request, response, std::move(f));
}

void FaceNet::Stub::experimental_async::GenerateEmbedding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::facenet_server::EmbeddingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateEmbedding_, context, request, response, std::move(f));
}

void FaceNet::Stub::experimental_async::GenerateEmbedding(::grpc::ClientContext* context, const ::facenet_server::EmbeddingRequest* request, ::facenet_server::EmbeddingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateEmbedding_, context, request, response, reactor);
}

void FaceNet::Stub::experimental_async::GenerateEmbedding(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::facenet_server::EmbeddingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateEmbedding_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::facenet_server::EmbeddingReply>* FaceNet::Stub::AsyncGenerateEmbeddingRaw(::grpc::ClientContext* context, const ::facenet_server::EmbeddingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::facenet_server::EmbeddingReply>::Create(channel_.get(), cq, rpcmethod_GenerateEmbedding_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::facenet_server::EmbeddingReply>* FaceNet::Stub::PrepareAsyncGenerateEmbeddingRaw(::grpc::ClientContext* context, const ::facenet_server::EmbeddingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::facenet_server::EmbeddingReply>::Create(channel_.get(), cq, rpcmethod_GenerateEmbedding_, context, request, false);
}

FaceNet::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceNet_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceNet::Service, ::facenet_server::EmbeddingRequest, ::facenet_server::EmbeddingReply>(
          std::mem_fn(&FaceNet::Service::GenerateEmbedding), this)));
}

FaceNet::Service::~Service() {
}

::grpc::Status FaceNet::Service::GenerateEmbedding(::grpc::ServerContext* context, const ::facenet_server::EmbeddingRequest* request, ::facenet_server::EmbeddingReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace facenet_server

